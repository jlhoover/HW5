{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from '../_services/auth.service';\nimport { NotificationService } from '../_services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/auth.service\";\nimport * as i2 from \"../_services/notification.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(authenticationService, notif) {\n      this.authenticationService = authenticationService;\n      this.notif = notif;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].indexOf(err.status) !== -1) {\n          // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n          this.authenticationService.logout();\n          location.reload();\n        }\n\n        if ([400, 501, 502, 503].indexOf(err.status) !== -1) {\n          this.notif.showNotif(err.error.message, 'error', 1000);\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.NotificationService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}