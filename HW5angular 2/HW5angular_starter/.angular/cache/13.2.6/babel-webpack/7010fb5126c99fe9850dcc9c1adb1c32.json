{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    //Added HttpClient\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser'))); //this is used by app.component.ts\n      // currentUser is turned into an Observable that will allow other parts of the app to subscribe and get notified when currentUserSubject changes.\n\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(username, password) {\n      // Changed to network based authentication strategy.\n      // Read more here: https://angular.io/guide/http\n      return this.http.post(`http://localhost:3030/user/authenticate`, {\n        username,\n        password\n      }).pipe(map(user => {\n        // login successful if there's a jwt token in the response\n        if (user && user.token) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n\n        return user;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage to log user out\n      localStorage.removeItem('currentUser'); // notify all subscribers that user has logged out.\n\n      this.currentUserSubject.next(null);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}